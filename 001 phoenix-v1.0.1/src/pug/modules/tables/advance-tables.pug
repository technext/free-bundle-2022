extends ../../layouts/LayoutComponent

append variables
  -
    var pageHeader = {
      title: 'Advance Tables',
      description: `${title} uses <b>List.Js</b> for advance table. List.Js is a Tiny, invisible and simple, yet powerful and incredibly fast vanilla JavaScript library that adds search, sort, filters and flexibility to plain HTML lists, tables, or anything.`,
      url: `https://listjs.com/`,
      linkText: 'Documentation for List.js',
    }
  -
    var rightNav = [
      {
        name: 'Example',
        id: '#example',
      },
      {
        name: 'Pagination with numbering',
        id: '#pagination-with-numbering',
      },
      {
        name: 'Docs',
        id: '#docs',
      },
    ]
  -
    var rows = [
      {
        name: 'Anna',
        email: 'anna@example.com',
        age: 18,
      },
      {
        name: 'Homer',
        email: 'homer@example.com',
        age: 35,
      },
      {
        name: 'Oscar',
        email: 'oscar@example.com',
        age: 52,
      },
      {
        name: 'Emily',
        email: 'emily@example.com',
        age: 30,
      },
      {
        name: 'Jara',
        email: 'jara@example.com',
        age: 25,
      },
      {
        name: 'Clark',
        email: 'clark@example.com',
        age: 39,
      },
      {
        name: 'Jennifer',
        email: 'jennifer@example.com',
        age: 52,
      },
      {
        name: 'Tony',
        email: 'tony@example.com',
        age: 30,
      },
      {
        name: 'Tom',
        email: 'tom@example.com',
        age: 25,
      },
      {
        name: 'Michael',
        email: 'michael@example.com',
        age: 39,
      },
      {
        name: 'Antony',
        email: 'antony@example.com',
        age: 39,
      },
      {
        name: 'Raymond',
        email: 'raymond@example.com',
        age: 52,
      },
      {
        name: 'Marie',
        email: 'marie@example.com',
        age: 30,
      },
      {
        name: 'Cohen',
        email: 'cohen@example.com',
        age: 25,
      },
      {
        name: 'Rowen',
        email: 'rowen@example.com',
        age: 39,
      },
    ]

block component
  +ComponentCard({
    title: 'Example'
  }).mb-3
    #tableExample(data-list!={
      valueNames: ['name', 'email', 'age'],
      page: 5,
      pagination: true
    })
      .table-responsive.scrollbar
        table.table.table-bordered.table-striped.fs--1.mb-0
          thead.bg-200.text-900
            tr
              th.sort(data-sort="name") Name
              th.sort(data-sort="email") Email
              th.sort(data-sort="age") Age
          tbody.list
            each row in rows
              tr
                td.name=row.name
                td.email=row.email
                td.age=row.age
      .row.align-items-center.mt-3
        .pagination.d-none
        .col
          p.mb-0.fs--1
            ='\n'
            span.d-none.d-sm-inline-block(data-list-info)
            ='\n'
            span.d-none.d-sm-inline-block  &mdash; 
            ='\n'
            a.fw-semi-bold(href='#!' data-list-view="*")
              ='\n'
              | View all
              ='\n'
              span.fas.fa-angle-right.ms-1(data-fa-transform='down-1')
              ='\n'
            a.fw-semi-bold.d-none(href='#!' data-list-view="less")
              ='\n'
              | View Less
              ='\n'
              span.fas.fa-angle-right.ms-1(data-fa-transform='down-1')
              ='\n'
        .col-auto.d-flex
          = '\n'
          button.btn.btn-sm.btn-primary(type='button' data-list-pagination='prev')
            span Previous
          = '\n'
          button.btn.btn-sm.btn-primary.px-4.ms-2(type='button' data-list-pagination='next')
            span Next

  +ComponentCard({
    title: 'Pagination with numbering',
    description:'Add <code> pagination </code> class for enable number pagination. The following structure will enable number pagination with next and previous button.',
  }).my-4
    #tableExample2(data-list!={
      valueNames: ['name', 'email', 'age'],
      page: 5,
      pagination: true
    })
      .table-responsive.scrollbar
        table.table.table-bordered.table-striped.fs--1.mb-0
          thead.bg-200.text-900
            tr
              th.sort(data-sort="name") Name
              th.sort(data-sort="email") Email
              th.sort(data-sort="age") Age
          tbody.list 
            each row in rows
              tr
                td.name=row.name
                td.email=row.email
                td.age=row.age

      .d-flex.justify-content-center.mt-3
        = '\n'
        button(type='button' title="Previous" data-list-pagination='prev').btn.btn-sm.btn-falcon-default.me-1
          span.fas.fa-chevron-left
        = '\n'
        ul.pagination.mb-0
        = '\n'
        button(type='button' title="Next" data-list-pagination='next').btn.btn-sm.btn-falcon-default.ms-1
          span.fas.fa-chevron-right
  

  +ComponentCard({
    title: 'Docs',
    hideNavTab: true
  }).my-4
    p Integrate List in #{name} by following these easy steps: 
    ul
      li Set unique ID and add 
        code data-list 
        | attribute to the wrapper element  and list your column in 
        code valueNames 
        | property. 
        +ComponentCardLib.my-1
          #tableExample(data-list!={ valueNames: ["name", "email", "age"]})
            // Your list content will go here
      li To enable sorting in your column, add 
        code data-sort 
        | attribute and assign column name to the attribute. 

        +ComponentCardLib.my-1
          th.sort(data-sort="name") Customer
      li Add 
        code list 
        | class to the content wrapper element.

        +ComponentCardLib.my-1
          tbody.list 
            // Your value will go here

      li Then wrap your value with column name as a class. For example, if your column name is 
        code name 
        | then the value will be look like this:
        +ComponentCardLib.my-1
          td.name John Doe
      li To add pagination add 
        code .pagination 
        | class inside your wrapper element
      li To enable  button pagination add 
        code data-list-pagination='prev' 
        | and 
        code data-list-pagination='next' 
        | to the "Prev" and "Next" buttons respectively.
      li To see the list info, add 
        code data-list-info
        |  attribute to a DOM element inside your wrapper element.